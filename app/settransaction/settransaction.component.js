"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var common_1 = require("@angular/common");
var page_1 = require("ui/page");
var auth_service_1 = require("../../services/auth.service");
var member_service_1 = require("../../services/member.service");
var LS = require("nativescript-localstorage");
var nativescript_fancyalert_1 = require("nativescript-fancyalert");
var SetTransactionComponent = /** @class */ (function () {
    function SetTransactionComponent(location, authService, memberService, router, activatedRoute, _page) {
        this.location = location;
        this.authService = authService;
        this.memberService = memberService;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this._page = _page;
        this.cooperative = [];
        this.hint = "Select Cooperative";
        this.cssClass = "default";
        this.input = {
            "firstname": "",
            "lastname": "",
            "email": "",
            "password": ""
        };
    }
    SetTransactionComponent.prototype.ngAfterViewInit = function () {
    };
    SetTransactionComponent.prototype.ngOnInit = function () {
        this._page.actionBarHidden = true;
        var dataObject = JSON.parse(LS.getItem('currentUser'));
        console.log("User ID  on TransPIN " + dataObject._id);
        if (dataObject._id) {
            this.userId = dataObject._id;
            this.userMode = dataObject.userMode;
        }
    };
    SetTransactionComponent.prototype.register = function () {
        console.log("Reaching Register ");
    };
    SetTransactionComponent.prototype.onNavBtnTap = function () {
        // This code will be called only in Android.
        console.log("Navigation button tapped!");
    };
    SetTransactionComponent.prototype.next = function () {
        if (this.pin.length < 4 || this.cpin.length < 4) {
            nativescript_fancyalert_1.TNSFancyAlert.showError("Error!", "The minimum length of Trans Pin is 4 digit", "Ok");
            return;
        }
        if (this.pin != this.cpin) {
            nativescript_fancyalert_1.TNSFancyAlert.showError("Error!", "Your transaction did not match", "Ok");
            return;
        }
        console.log("User Id for setPin " + this.userId);
        this.setPin(this.userId, this.pin, this.cpin);
    };
    SetTransactionComponent.prototype.goBack = function () {
        this.location.back();
    };
    SetTransactionComponent.prototype.startBackgroundAnimation = function (background) {
        background.animate({
            scale: { x: 1.0, y: 1.0 },
            duration: 10000
        });
    };
    SetTransactionComponent.prototype.oncooperativechange = function (args) {
        // console.log(`Drop Down selected index changed  ${args.oldIndex} to ${args.newIndex}. New value is "${this.sessionitems.getValue(
        //     args.newIndex)}"`);
        console.log("Selected ID " + args.newIndex);
        this.selectedCooperative = this.cooperativeList.getValue(args.newIndex);
        console.log("Selected Id Value  " + this.selectedCooperative);
    };
    SetTransactionComponent.prototype.setPin = function (userId, pin, confirmPin) {
        var _this = this;
        console.log("Set Pin Id " + userId);
        this.memberService.changePin(userId, pin, confirmPin).subscribe(function (data) {
            console.log("Change Pin " + JSON.stringify(data["data"]));
            //send OTP
            _this.sendOTP(userId);
            console.log("Set Pin User Mode " + _this.userMode);
            if (_this.userMode == "TransPin") {
                LS.removeItem('currentUser');
                LS.setItem('currentUser', JSON.stringify(data["data"]));
                _this.router.navigate(['/otp']);
            }
            if (_this.userMode == "Confirm") {
                LS.removeItem('currentUser');
                LS.setItem('currentUser', JSON.stringify(data["data"]));
                _this.router.navigate(['/otp']);
            }
        }, function (err) {
            console.log(err);
            nativescript_fancyalert_1.TNSFancyAlert.showError("Error!", err.error.message, "Ok").then(function () {
            });
        });
    };
    SetTransactionComponent.prototype.sendOTP = function (userId) {
        console.log("Sent Trans Pin OTp " + userId);
        this.authService.sendToken(userId).subscribe(function (data) {
            console.log("OTP Send" + JSON.stringify(data["data"]));
            //send OTP
        }, function (err) {
            console.log(err);
            nativescript_fancyalert_1.TNSFancyAlert.showError("Error!", err.error.message, "Ok").then(function () {
            });
        });
    };
    SetTransactionComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: "ns-settransaction",
            templateUrl: "./settransaction.component.html",
            styleUrls: ["./settransaction-common.css", "./settransaction.component.css"],
        }),
        __metadata("design:paramtypes", [common_1.Location, auth_service_1.AuthService, member_service_1.MemberService, router_1.Router, router_1.ActivatedRoute, page_1.Page])
    ], SetTransactionComponent);
    return SetTransactionComponent;
}());
exports.SetTransactionComponent = SetTransactionComponent;
//# sourceMappingURL=data:application/json;base64,