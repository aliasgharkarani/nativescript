"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var auth_service_1 = require("../../services/auth.service");
var LS = require("nativescript-localstorage");
var nativescript_fancyalert_1 = require("nativescript-fancyalert");
var router_1 = require("@angular/router");
var OtpComponent = /** @class */ (function () {
    function OtpComponent(location, authService, router, activatedRoute) {
        this.location = location;
        this.authService = authService;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.cooperative = [];
        this.hint = "Select Cooperative";
        this.cssClass = "default";
        this.input = {
            "firstname": "",
            "lastname": "",
            "email": "",
            "password": ""
        };
    }
    OtpComponent.prototype.ngAfterViewInit = function () {
    };
    OtpComponent.prototype.ngOnInit = function () {
        var dataObject = JSON.parse(LS.getItem('currentUser'));
        console.log("User ID " + dataObject._id);
        if (dataObject._id) {
            this.userId = dataObject._id;
            this.userMode = dataObject.userMode;
        }
    };
    OtpComponent.prototype.register = function () {
        // if(this.input.firstname && this.input.lastname && this.input.email && this.input.password) {
        //     ApplicationSettings.setString("account", JSON.stringify(this.input));
        //     this.location.back();
        // } else {
        //     (new SnackBar()).simple("All Fields Required!");
        // }
        console.log("Reaching Register ");
    };
    OtpComponent.prototype.onNavBtnTap = function () {
        // This code will be called only in Android.
        console.log("Navigation button tapped!");
    };
    OtpComponent.prototype.goBack = function () {
        this.location.back();
    };
    OtpComponent.prototype.startBackgroundAnimation = function (background) {
        background.animate({
            scale: { x: 1.0, y: 1.0 },
            duration: 10000
        });
    };
    OtpComponent.prototype.oncooperativechange = function (args) {
        // console.log(`Drop Down selected index changed  ${args.oldIndex} to ${args.newIndex}. New value is "${this.sessionitems.getValue(
        //     args.newIndex)}"`);
        console.log("Selected ID " + args.newIndex);
        this.selectedCooperative = this.cooperativeList.getValue(args.newIndex);
        console.log("Selected Id Value  " + this.selectedCooperative);
    };
    OtpComponent.prototype.genarateNewToken = function () {
        this.sendOTP(this.userId);
    };
    OtpComponent.prototype.verifyOTP = function () {
        this.getOTP(this.tpass, this.userId);
    };
    OtpComponent.prototype.sendOTP = function (userId) {
        console.log("Edit Phone Number " + userId);
        this.authService.sendToken(userId).subscribe(function (data) {
            console.log("OTP Send" + JSON.stringify(data["data"]));
            //send OTP
            nativescript_fancyalert_1.TNSFancyAlert.showSuccess("Success!", "OTP sent", "Ok")
                .then(function () {
            });
        }, function (err) {
            console.log(err);
            nativescript_fancyalert_1.TNSFancyAlert.showError("Error!", err.error.message, "Ok").then(function () {
            });
        });
    };
    OtpComponent.prototype.getOTP = function (token, userId) {
        var _this = this;
        console.log("Edit Phone Number " + userId);
        this.authService.getToken(token, userId).subscribe(function (data) {
            console.log("Get OTP Ok " + JSON.stringify(data["data"]));
            nativescript_fancyalert_1.TNSFancyAlert.showSuccess("Success!", "Token Verified", "Ok")
                .then(function () {
            });
            //send OTP
            // Redirect to Change Pin
            if (_this.userMode == "OTPVerify") {
                LS.removeItem('currentUser');
                LS.setItem('currentUser', JSON.stringify(data["data"]));
                _this.router.navigate(['/transpin']);
            }
            if (_this.userMode == "TransPin") {
                LS.removeItem('currentUser');
                LS.setItem('currentUser', JSON.stringify(data["data"]));
                _this.router.navigate(['/']);
            }
            if (_this.userMode == "Confirm") {
                //  LS.removeItem('currentUser');
                //  LS.setItem('currentUser', JSON.stringify(data["data"]));
                _this.router.navigate(['/']);
            }
        }, function (err) {
            console.log(err);
            nativescript_fancyalert_1.TNSFancyAlert.showError("Error!", err.error.message, "Ok").then(function () {
            });
        });
    };
    OtpComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: "ns-otp",
            templateUrl: "otp.component.html",
            styleUrls: ["./otp-common.css", "./otp.component.css"],
        }),
        __metadata("design:paramtypes", [common_1.Location, auth_service_1.AuthService, router_1.Router, router_1.ActivatedRoute])
    ], OtpComponent);
    return OtpComponent;
}());
exports.OtpComponent = OtpComponent;
//# sourceMappingURL=data:application/json;base64,