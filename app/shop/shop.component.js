"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
var nativescript_bottom_navigation_1 = require("nativescript-bottom-navigation");
var element_registry_1 = require("nativescript-angular/element-registry");
var nativescript_cardview_1 = require("nativescript-cardview");
element_registry_1.registerElement("CardView", function () { return nativescript_cardview_1.CardView; });
var ShopComponent = /** @class */ (function () {
    function ShopComponent(page) {
        this.page = page;
        this.selectedTab = 0;
        this.tabs = [
            new nativescript_bottom_navigation_1.BottomNavigationTab('First', 'shop'),
            new nativescript_bottom_navigation_1.BottomNavigationTab('Second', 'box', false),
            new nativescript_bottom_navigation_1.BottomNavigationTab('Third', 'accept'),
            new nativescript_bottom_navigation_1.BottomNavigationTab('Fourth', 'user')
        ];
    }
    ShopComponent.prototype.ngOnInit = function () {
        this._bottomNavigation = this.page.getViewById('bottomNavigation');
    };
    ShopComponent.prototype.onBottomNavigationTabSelected = function (args) {
        this.selectedTab = args.newIndex;
        if (this.selectedTab === 1) {
            alert('This item has selectable: false, and should be used to perform actions');
        }
        console.log("old tab index:  " + args.oldIndex);
        console.log("selected tab index:  " + args.newIndex);
    };
    ShopComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: "ns-shop",
            templateUrl: "./shop.component.html",
            styleUrls: ["./shop-common.css", "./shop.component.css"],
        }),
        __metadata("design:paramtypes", [page_1.Page])
    ], ShopComponent);
    return ShopComponent;
}());
exports.ShopComponent = ShopComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzaG9wLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUFpRTtBQVNqRSxnQ0FBK0I7QUFlL0IsaUZBSXdDO0FBTXhDLDBFQUF3RTtBQUN4RSwrREFBaUQ7QUFDakQsa0NBQWUsQ0FBQyxVQUFVLEVBQUUsY0FBTSxPQUFBLGdDQUFRLEVBQVIsQ0FBUSxDQUFDLENBQUM7QUFjNUM7SUFhSSx1QkFBb0IsSUFBVTtRQUFWLFNBQUksR0FBSixJQUFJLENBQU07UUFWdkIsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFDeEIsU0FBSSxHQUEwQjtZQUNqQyxJQUFJLG9EQUFtQixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUM7WUFDeEMsSUFBSSxvREFBbUIsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztZQUMvQyxJQUFJLG9EQUFtQixDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUM7WUFDMUMsSUFBSSxvREFBbUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDO1NBQzVDLENBQUM7SUFJZ0MsQ0FBQztJQUVuQyxnQ0FBUSxHQUFSO1FBQ0ksSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELHFEQUE2QixHQUE3QixVQUE4QixJQUE0QjtRQUN0RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDakMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLEtBQUssQ0FBQyx3RUFBd0UsQ0FBQyxDQUFDO1FBQ3BGLENBQUM7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFtQixJQUFJLENBQUMsUUFBVSxDQUFDLENBQUM7UUFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBd0IsSUFBSSxDQUFDLFFBQVUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUExQlEsYUFBYTtRQVZ6QixnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ25CLFFBQVEsRUFBRSxTQUFTO1lBQ25CLFdBQVcsRUFBRSx1QkFBdUI7WUFDcEMsU0FBUyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsc0JBQXNCLENBQUM7U0FHM0QsQ0FBQzt5Q0FnQjRCLFdBQUk7T0FickIsYUFBYSxDQWtDekI7SUFBRCxvQkFBQztDQUFBLEFBbENELElBa0NDO0FBbENZLHNDQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIEFmdGVyVmlld0luaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBSb3V0ZXIsIEFjdGl2YXRlZFJvdXRlIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xyXG5pbXBvcnQgeyBMb2NhdGlvbiB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcclxuaW1wb3J0IHsgU25hY2tCYXIgfSBmcm9tIFwibmF0aXZlc2NyaXB0LXNuYWNrYmFyXCI7XHJcbmltcG9ydCAqIGFzIEFwcGxpY2F0aW9uU2V0dGluZ3MgZnJvbSBcImFwcGxpY2F0aW9uLXNldHRpbmdzXCI7XHJcbmltcG9ydCB7IGNvbm5lY3Rpb25UeXBlLCBnZXRDb25uZWN0aW9uVHlwZSB9IGZyb20gXCJjb25uZWN0aXZpdHlcIjtcclxuaW1wb3J0IHsgQW5pbWF0aW9uIH0gZnJvbSBcInVpL2FuaW1hdGlvblwiO1xyXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcInVpL2NvcmUvdmlld1wiO1xyXG5pbXBvcnQgeyBwcm9tcHQgfSBmcm9tIFwidWkvZGlhbG9nc1wiO1xyXG5pbXBvcnQgeyBQYWdlIH0gZnJvbSBcInVpL3BhZ2VcIjtcclxuaW1wb3J0IHsgVGV4dEZpZWxkIH0gZnJvbSBcInVpL3RleHQtZmllbGRcIjtcclxuXHJcbmltcG9ydCB7IFZhbHVlTGlzdCwgRHJvcERvd24gfSBmcm9tIFwibmF0aXZlc2NyaXB0LWRyb3AtZG93blwiO1xyXG5pbXBvcnQgeyBTZWxlY3RlZEluZGV4Q2hhbmdlZEV2ZW50RGF0YSB9IGZyb20gXCJuYXRpdmVzY3JpcHQtZHJvcC1kb3duXCI7XHJcbmltcG9ydCB7IENvb3BlcmF0aXZlLCBVc2VyIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgQ29vcGVyYXRpdmVTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2Nvb3BlcmF0aXZlLnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgQ29vcGVyYXRpdmVTdGFmZlNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvY29vcGVyYXRpdmVTdGFmZi5zZXJ2aWNlXCI7XHJcblxyXG5pbXBvcnQgeyBNZW1iZXJTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL21lbWJlci5zZXJ2aWNlXCI7XHJcblxyXG5pbXBvcnQgeyBDb29wZXJhdGl2ZVN0YWZmLCBWZXJpZnlBdXRoIH0gZnJvbSBcIi4uLy4uL21vZGVscy9pbmRleFwiO1xyXG5cclxuaW1wb3J0IHsgVE5TRmFuY3lBbGVydCB9IGZyb20gXCJuYXRpdmVzY3JpcHQtZmFuY3lhbGVydFwiO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIEJvdHRvbU5hdmlnYXRpb24sXHJcbiAgICBCb3R0b21OYXZpZ2F0aW9uVGFiLFxyXG4gICAgT25UYWJTZWxlY3RlZEV2ZW50RGF0YVxyXG59IGZyb20gXCJuYXRpdmVzY3JpcHQtYm90dG9tLW5hdmlnYXRpb25cIjtcclxuaW1wb3J0IHtcclxuICAgIEFuZHJvaWREYXRhLCBFbGV2YXRpb24sXHJcbiAgICBTaGFwZSwgU2hhcGVFbnVtXHJcbn0gZnJvbSAnbmF0aXZlc2NyaXB0LW5nLXNoYWRvdyc7XHJcblxyXG5pbXBvcnQgeyByZWdpc3RlckVsZW1lbnQgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWFuZ3VsYXIvZWxlbWVudC1yZWdpc3RyeVwiO1xyXG5pbXBvcnQgeyBDYXJkVmlldyB9IGZyb20gXCJuYXRpdmVzY3JpcHQtY2FyZHZpZXdcIjtcclxucmVnaXN0ZXJFbGVtZW50KFwiQ2FyZFZpZXdcIiwgKCkgPT4gQ2FyZFZpZXcpO1xyXG5cclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbiAgICBzZWxlY3RvcjogXCJucy1zaG9wXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIuL3Nob3AuY29tcG9uZW50Lmh0bWxcIixcclxuICAgIHN0eWxlVXJsczogW1wiLi9zaG9wLWNvbW1vbi5jc3NcIiwgXCIuL3Nob3AuY29tcG9uZW50LmNzc1wiXSxcclxuIFxyXG4gIFxyXG59KVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTaG9wQ29tcG9uZW50ICB7XHJcblxyXG5cclxuICAgIHB1YmxpYyBzZWxlY3RlZFRhYjogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyB0YWJzOiBCb3R0b21OYXZpZ2F0aW9uVGFiW10gPSBbXHJcbiAgICAgICAgbmV3IEJvdHRvbU5hdmlnYXRpb25UYWIoJ0ZpcnN0JywgJ3Nob3AnKSxcclxuICAgICAgICBuZXcgQm90dG9tTmF2aWdhdGlvblRhYignU2Vjb25kJywgJ2JveCcsIGZhbHNlKSxcclxuICAgICAgICBuZXcgQm90dG9tTmF2aWdhdGlvblRhYignVGhpcmQnLCAnYWNjZXB0JyksXHJcbiAgICAgICAgbmV3IEJvdHRvbU5hdmlnYXRpb25UYWIoJ0ZvdXJ0aCcsICd1c2VyJylcclxuICAgIF07XHJcblxyXG4gICAgcHJpdmF0ZSBfYm90dG9tTmF2aWdhdGlvbjogQm90dG9tTmF2aWdhdGlvbjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhZ2U6IFBhZ2UpIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2JvdHRvbU5hdmlnYXRpb24gPSB0aGlzLnBhZ2UuZ2V0Vmlld0J5SWQoJ2JvdHRvbU5hdmlnYXRpb24nKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkJvdHRvbU5hdmlnYXRpb25UYWJTZWxlY3RlZChhcmdzOiBPblRhYlNlbGVjdGVkRXZlbnREYXRhKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFRhYiA9IGFyZ3MubmV3SW5kZXg7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRUYWIgPT09IDEpIHtcclxuICAgICAgICAgICAgYWxlcnQoJ1RoaXMgaXRlbSBoYXMgc2VsZWN0YWJsZTogZmFsc2UsIGFuZCBzaG91bGQgYmUgdXNlZCB0byBwZXJmb3JtIGFjdGlvbnMnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coYG9sZCB0YWIgaW5kZXg6ICAke2FyZ3Mub2xkSW5kZXh9YCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYHNlbGVjdGVkIHRhYiBpbmRleDogICR7YXJncy5uZXdJbmRleH1gKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbn0iXX0=