"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
var nativescript_bottom_navigation_1 = require("nativescript-bottom-navigation");
// import { registerElement } from "nativescript-angular/element-registry";
// registerElement("Fab", () => require("nativescript-floatingactionbutton").Fab);
//import { registerElement } from "nativescript-angular/element-registry";
//import { CardView } from "nativescript-cardview";
//registerElement("CardView", () => CardView);
// import * as elementRegistryModule from "nativescript-angular/element-registry";
// import * as LabelModule from "tns-core-modules/ui/label";
// elementRegistryModule.registerElement(
//   "CardView",
//   () => require("nativescript-cardview").CardView
// );
var PinUpdateComponent = /** @class */ (function () {
    function PinUpdateComponent(page) {
        this.page = page;
        this.selectedTab = 0;
        this.tabs = [
            new nativescript_bottom_navigation_1.BottomNavigationTab('First', 'shop'),
            new nativescript_bottom_navigation_1.BottomNavigationTab('Second', 'box', false),
            new nativescript_bottom_navigation_1.BottomNavigationTab('Third', 'accept'),
            new nativescript_bottom_navigation_1.BottomNavigationTab('Fourth', 'user')
        ];
    }
    PinUpdateComponent.prototype.ngOnInit = function () {
        this._bottomNavigation = this.page.getViewById('bottomNavigation');
    };
    PinUpdateComponent.prototype.onBottomNavigationTabSelected = function (args) {
        this.selectedTab = args.newIndex;
        if (this.selectedTab === 1) {
            alert('This item has selectable: false, and should be used to perform actions');
        }
        console.log("old tab index:  " + args.oldIndex);
        console.log("selected tab index:  " + args.newIndex);
    };
    PinUpdateComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: "ns-pinupdate",
            templateUrl: "pinupdate.component.html",
            styleUrls: ["./pinupdate-common.css", "./pinupdate.component.css"],
        }),
        __metadata("design:paramtypes", [page_1.Page])
    ], PinUpdateComponent);
    return PinUpdateComponent;
}());
exports.PinUpdateComponent = PinUpdateComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGludXBkYXRlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBpbnVwZGF0ZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBaUU7QUFTakUsZ0NBQStCO0FBZS9CLGlGQUl3QztBQU14QywyRUFBMkU7QUFDM0Usa0ZBQWtGO0FBQ2xGLDBFQUEwRTtBQUMxRSxtREFBbUQ7QUFDbkQsOENBQThDO0FBRTlDLGtGQUFrRjtBQUNsRiw0REFBNEQ7QUFDNUQseUNBQXlDO0FBQ3pDLGdCQUFnQjtBQUNoQixvREFBb0Q7QUFDcEQsS0FBSztBQVdMO0lBYUksNEJBQW9CLElBQVU7UUFBVixTQUFJLEdBQUosSUFBSSxDQUFNO1FBVnZCLGdCQUFXLEdBQVcsQ0FBQyxDQUFDO1FBQ3hCLFNBQUksR0FBMEI7WUFDakMsSUFBSSxvREFBbUIsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDO1lBQ3hDLElBQUksb0RBQW1CLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7WUFDL0MsSUFBSSxvREFBbUIsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDO1lBQzFDLElBQUksb0RBQW1CLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQztTQUM1QyxDQUFDO0lBSWdDLENBQUM7SUFFbkMscUNBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCwwREFBNkIsR0FBN0IsVUFBOEIsSUFBNEI7UUFDdEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ2pDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixLQUFLLENBQUMsd0VBQXdFLENBQUMsQ0FBQztRQUNwRixDQUFDO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBbUIsSUFBSSxDQUFDLFFBQVUsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQXdCLElBQUksQ0FBQyxRQUFVLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBMUJRLGtCQUFrQjtRQVA5QixnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ25CLFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFdBQVcsRUFBRSwwQkFBMEI7WUFDdkMsU0FBUyxFQUFFLENBQUMsd0JBQXdCLEVBQUUsMkJBQTJCLENBQUM7U0FDckUsQ0FBQzt5Q0FlNEIsV0FBSTtPQWJyQixrQkFBa0IsQ0FpQzlCO0lBQUQseUJBQUM7Q0FBQSxBQWpDRCxJQWlDQztBQWpDWSxnREFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFJvdXRlciwgQWN0aXZhdGVkUm91dGUgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XHJcbmltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xyXG5pbXBvcnQgeyBTbmFja0JhciB9IGZyb20gXCJuYXRpdmVzY3JpcHQtc25hY2tiYXJcIjtcclxuaW1wb3J0ICogYXMgQXBwbGljYXRpb25TZXR0aW5ncyBmcm9tIFwiYXBwbGljYXRpb24tc2V0dGluZ3NcIjtcclxuaW1wb3J0IHsgY29ubmVjdGlvblR5cGUsIGdldENvbm5lY3Rpb25UeXBlIH0gZnJvbSBcImNvbm5lY3Rpdml0eVwiO1xyXG5pbXBvcnQgeyBBbmltYXRpb24gfSBmcm9tIFwidWkvYW5pbWF0aW9uXCI7XHJcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwidWkvY29yZS92aWV3XCI7XHJcbmltcG9ydCB7IHByb21wdCB9IGZyb20gXCJ1aS9kaWFsb2dzXCI7XHJcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwidWkvcGFnZVwiO1xyXG5pbXBvcnQgeyBUZXh0RmllbGQgfSBmcm9tIFwidWkvdGV4dC1maWVsZFwiO1xyXG5cclxuaW1wb3J0IHsgVmFsdWVMaXN0LCBEcm9wRG93biB9IGZyb20gXCJuYXRpdmVzY3JpcHQtZHJvcC1kb3duXCI7XHJcbmltcG9ydCB7IFNlbGVjdGVkSW5kZXhDaGFuZ2VkRXZlbnREYXRhIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1kcm9wLWRvd25cIjtcclxuaW1wb3J0IHsgQ29vcGVyYXRpdmUsIFVzZXIgfSBmcm9tICcuLi8uLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBDb29wZXJhdGl2ZVNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvY29vcGVyYXRpdmUuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBDb29wZXJhdGl2ZVN0YWZmU2VydmljZSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9jb29wZXJhdGl2ZVN0YWZmLnNlcnZpY2VcIjtcclxuXHJcbmltcG9ydCB7IE1lbWJlclNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvbWVtYmVyLnNlcnZpY2VcIjtcclxuXHJcbmltcG9ydCB7IENvb3BlcmF0aXZlU3RhZmYsIFZlcmlmeUF1dGggfSBmcm9tIFwiLi4vLi4vbW9kZWxzL2luZGV4XCI7XHJcblxyXG5pbXBvcnQgeyBUTlNGYW5jeUFsZXJ0IH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1mYW5jeWFsZXJ0XCI7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgQm90dG9tTmF2aWdhdGlvbixcclxuICAgIEJvdHRvbU5hdmlnYXRpb25UYWIsXHJcbiAgICBPblRhYlNlbGVjdGVkRXZlbnREYXRhXHJcbn0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1ib3R0b20tbmF2aWdhdGlvblwiO1xyXG5pbXBvcnQge1xyXG4gICAgQW5kcm9pZERhdGEsIEVsZXZhdGlvbixcclxuICAgIFNoYXBlLCBTaGFwZUVudW1cclxufSBmcm9tICduYXRpdmVzY3JpcHQtbmctc2hhZG93JztcclxuXHJcbi8vIGltcG9ydCB7IHJlZ2lzdGVyRWxlbWVudCB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9lbGVtZW50LXJlZ2lzdHJ5XCI7XHJcbi8vIHJlZ2lzdGVyRWxlbWVudChcIkZhYlwiLCAoKSA9PiByZXF1aXJlKFwibmF0aXZlc2NyaXB0LWZsb2F0aW5nYWN0aW9uYnV0dG9uXCIpLkZhYik7XHJcbi8vaW1wb3J0IHsgcmVnaXN0ZXJFbGVtZW50IH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1hbmd1bGFyL2VsZW1lbnQtcmVnaXN0cnlcIjtcclxuLy9pbXBvcnQgeyBDYXJkVmlldyB9IGZyb20gXCJuYXRpdmVzY3JpcHQtY2FyZHZpZXdcIjtcclxuLy9yZWdpc3RlckVsZW1lbnQoXCJDYXJkVmlld1wiLCAoKSA9PiBDYXJkVmlldyk7XHJcblxyXG4vLyBpbXBvcnQgKiBhcyBlbGVtZW50UmVnaXN0cnlNb2R1bGUgZnJvbSBcIm5hdGl2ZXNjcmlwdC1hbmd1bGFyL2VsZW1lbnQtcmVnaXN0cnlcIjtcclxuLy8gaW1wb3J0ICogYXMgTGFiZWxNb2R1bGUgZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvbGFiZWxcIjtcclxuLy8gZWxlbWVudFJlZ2lzdHJ5TW9kdWxlLnJlZ2lzdGVyRWxlbWVudChcclxuLy8gICBcIkNhcmRWaWV3XCIsXHJcbi8vICAgKCkgPT4gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1jYXJkdmlld1wiKS5DYXJkVmlld1xyXG4vLyApO1xyXG5cclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbiAgICBzZWxlY3RvcjogXCJucy1waW51cGRhdGVcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcInBpbnVwZGF0ZS5jb21wb25lbnQuaHRtbFwiLFxyXG4gICAgc3R5bGVVcmxzOiBbXCIuL3BpbnVwZGF0ZS1jb21tb24uY3NzXCIsIFwiLi9waW51cGRhdGUuY29tcG9uZW50LmNzc1wiXSxcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBQaW5VcGRhdGVDb21wb25lbnQge1xyXG5cclxuXHJcbiAgICBwdWJsaWMgc2VsZWN0ZWRUYWI6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgdGFiczogQm90dG9tTmF2aWdhdGlvblRhYltdID0gW1xyXG4gICAgICAgIG5ldyBCb3R0b21OYXZpZ2F0aW9uVGFiKCdGaXJzdCcsICdzaG9wJyksXHJcbiAgICAgICAgbmV3IEJvdHRvbU5hdmlnYXRpb25UYWIoJ1NlY29uZCcsICdib3gnLCBmYWxzZSksXHJcbiAgICAgICAgbmV3IEJvdHRvbU5hdmlnYXRpb25UYWIoJ1RoaXJkJywgJ2FjY2VwdCcpLFxyXG4gICAgICAgIG5ldyBCb3R0b21OYXZpZ2F0aW9uVGFiKCdGb3VydGgnLCAndXNlcicpXHJcbiAgICBdO1xyXG5cclxuICAgIHByaXZhdGUgX2JvdHRvbU5hdmlnYXRpb246IEJvdHRvbU5hdmlnYXRpb247XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwYWdlOiBQYWdlKSB7IH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9ib3R0b21OYXZpZ2F0aW9uID0gdGhpcy5wYWdlLmdldFZpZXdCeUlkKCdib3R0b21OYXZpZ2F0aW9uJyk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Cb3R0b21OYXZpZ2F0aW9uVGFiU2VsZWN0ZWQoYXJnczogT25UYWJTZWxlY3RlZEV2ZW50RGF0YSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRUYWIgPSBhcmdzLm5ld0luZGV4O1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVGFiID09PSAxKSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KCdUaGlzIGl0ZW0gaGFzIHNlbGVjdGFibGU6IGZhbHNlLCBhbmQgc2hvdWxkIGJlIHVzZWQgdG8gcGVyZm9ybSBhY3Rpb25zJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGBvbGQgdGFiIGluZGV4OiAgJHthcmdzLm9sZEluZGV4fWApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBzZWxlY3RlZCB0YWIgaW5kZXg6ICAke2FyZ3MubmV3SW5kZXh9YCk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG4gICAgICBcclxuXHJcbn0iXX0=