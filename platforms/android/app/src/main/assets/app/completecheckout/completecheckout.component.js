"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
var nativescript_bottom_navigation_1 = require("nativescript-bottom-navigation");
// import { registerElement } from "nativescript-angular/element-registry";
// registerElement("Fab", () => require("nativescript-floatingactionbutton").Fab);
//import { registerElement } from "nativescript-angular/element-registry";
//import { CardView } from "nativescript-cardview";
//registerElement("CardView", () => CardView);
// import * as elementRegistryModule from "nativescript-angular/element-registry";
// import * as LabelModule from "tns-core-modules/ui/label";
// elementRegistryModule.registerElement(
//   "CardView",
//   () => require("nativescript-cardview").CardView
// );
var CompleteCheckoutComponent = /** @class */ (function () {
    function CompleteCheckoutComponent(page) {
        this.page = page;
        this.selectedTab = 0;
        this.tabs = [
            new nativescript_bottom_navigation_1.BottomNavigationTab('First', 'shop'),
            new nativescript_bottom_navigation_1.BottomNavigationTab('Second', 'box', false),
            new nativescript_bottom_navigation_1.BottomNavigationTab('Third', 'accept'),
            new nativescript_bottom_navigation_1.BottomNavigationTab('Fourth', 'user')
        ];
    }
    CompleteCheckoutComponent.prototype.ngOnInit = function () {
        this._bottomNavigation = this.page.getViewById('bottomNavigation');
    };
    CompleteCheckoutComponent.prototype.onBottomNavigationTabSelected = function (args) {
        this.selectedTab = args.newIndex;
        if (this.selectedTab === 1) {
            alert('This item has selectable: false, and should be used to perform actions');
        }
        console.log("old tab index:  " + args.oldIndex);
        console.log("selected tab index:  " + args.newIndex);
    };
    CompleteCheckoutComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: "ns-completecheckout",
            templateUrl: "./completecheckout.component.html",
            styleUrls: ["./completecheckout-common.css", "./completecheckout.component.css"],
        }),
        __metadata("design:paramtypes", [page_1.Page])
    ], CompleteCheckoutComponent);
    return CompleteCheckoutComponent;
}());
exports.CompleteCheckoutComponent = CompleteCheckoutComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxldGVjaGVja291dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21wbGV0ZWNoZWNrb3V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUFpRTtBQVNqRSxnQ0FBK0I7QUFlL0IsaUZBSXdDO0FBUXhDLDJFQUEyRTtBQUMzRSxrRkFBa0Y7QUFDbEYsMEVBQTBFO0FBQzFFLG1EQUFtRDtBQUNuRCw4Q0FBOEM7QUFFOUMsa0ZBQWtGO0FBQ2xGLDREQUE0RDtBQUM1RCx5Q0FBeUM7QUFDekMsZ0JBQWdCO0FBQ2hCLG9EQUFvRDtBQUNwRCxLQUFLO0FBV0w7SUFhSSxtQ0FBb0IsSUFBVTtRQUFWLFNBQUksR0FBSixJQUFJLENBQU07UUFWdkIsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFDeEIsU0FBSSxHQUEwQjtZQUNqQyxJQUFJLG9EQUFtQixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUM7WUFDeEMsSUFBSSxvREFBbUIsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztZQUMvQyxJQUFJLG9EQUFtQixDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUM7WUFDMUMsSUFBSSxvREFBbUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDO1NBQzVDLENBQUM7SUFJZ0MsQ0FBQztJQUVuQyw0Q0FBUSxHQUFSO1FBQ0ksSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELGlFQUE2QixHQUE3QixVQUE4QixJQUE0QjtRQUN0RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDakMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLEtBQUssQ0FBQyx3RUFBd0UsQ0FBQyxDQUFDO1FBQ3BGLENBQUM7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFtQixJQUFJLENBQUMsUUFBVSxDQUFDLENBQUM7UUFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBd0IsSUFBSSxDQUFDLFFBQVUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUExQlEseUJBQXlCO1FBUnJDLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsUUFBUSxFQUFFLHFCQUFxQjtZQUMvQixXQUFXLEVBQUUsbUNBQW1DO1lBQ2hELFNBQVMsRUFBRSxDQUFDLCtCQUErQixFQUFFLGtDQUFrQyxDQUFDO1NBQ25GLENBQUM7eUNBZ0I0QixXQUFJO09BYnJCLHlCQUF5QixDQWtDckM7SUFBRCxnQ0FBQztDQUFBLEFBbENELElBa0NDO0FBbENZLDhEQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBBZnRlclZpZXdJbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgUm91dGVyLCBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XHJcbmltcG9ydCB7IFNuYWNrQmFyIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1zbmFja2JhclwiO1xyXG5pbXBvcnQgKiBhcyBBcHBsaWNhdGlvblNldHRpbmdzIGZyb20gXCJhcHBsaWNhdGlvbi1zZXR0aW5nc1wiO1xyXG5pbXBvcnQgeyBjb25uZWN0aW9uVHlwZSwgZ2V0Q29ubmVjdGlvblR5cGUgfSBmcm9tIFwiY29ubmVjdGl2aXR5XCI7XHJcbmltcG9ydCB7IEFuaW1hdGlvbiB9IGZyb20gXCJ1aS9hbmltYXRpb25cIjtcclxuaW1wb3J0IHsgVmlldyB9IGZyb20gXCJ1aS9jb3JlL3ZpZXdcIjtcclxuaW1wb3J0IHsgcHJvbXB0IH0gZnJvbSBcInVpL2RpYWxvZ3NcIjtcclxuaW1wb3J0IHsgUGFnZSB9IGZyb20gXCJ1aS9wYWdlXCI7XHJcbmltcG9ydCB7IFRleHRGaWVsZCB9IGZyb20gXCJ1aS90ZXh0LWZpZWxkXCI7XHJcblxyXG5pbXBvcnQgeyBWYWx1ZUxpc3QsIERyb3BEb3duIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1kcm9wLWRvd25cIjtcclxuaW1wb3J0IHsgU2VsZWN0ZWRJbmRleENoYW5nZWRFdmVudERhdGEgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWRyb3AtZG93blwiO1xyXG5pbXBvcnQgeyBDb29wZXJhdGl2ZSwgVXNlciB9IGZyb20gXCIuLi8uLi9tb2RlbHMvaW5kZXhcIjtcclxuaW1wb3J0IHsgQ29vcGVyYXRpdmVTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2Nvb3BlcmF0aXZlLnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgQ29vcGVyYXRpdmVTdGFmZlNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvY29vcGVyYXRpdmVTdGFmZi5zZXJ2aWNlXCI7XHJcblxyXG5pbXBvcnQgeyBNZW1iZXJTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL21lbWJlci5zZXJ2aWNlXCI7XHJcblxyXG5pbXBvcnQgeyBDb29wZXJhdGl2ZVN0YWZmLCBWZXJpZnlBdXRoIH0gZnJvbSBcIi4uLy4uL21vZGVscy9pbmRleFwiO1xyXG5cclxuaW1wb3J0IHsgVE5TRmFuY3lBbGVydCB9IGZyb20gXCJuYXRpdmVzY3JpcHQtZmFuY3lhbGVydFwiO1xyXG5cclxuaW1wb3J0IHtcclxuICBCb3R0b21OYXZpZ2F0aW9uLFxyXG4gIEJvdHRvbU5hdmlnYXRpb25UYWIsXHJcbiAgT25UYWJTZWxlY3RlZEV2ZW50RGF0YVxyXG59IGZyb20gXCJuYXRpdmVzY3JpcHQtYm90dG9tLW5hdmlnYXRpb25cIjtcclxuaW1wb3J0IHtcclxuICBBbmRyb2lkRGF0YSxcclxuICBFbGV2YXRpb24sXHJcbiAgU2hhcGUsXHJcbiAgU2hhcGVFbnVtXHJcbn0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1uZy1zaGFkb3dcIjtcclxuXHJcbi8vIGltcG9ydCB7IHJlZ2lzdGVyRWxlbWVudCB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9lbGVtZW50LXJlZ2lzdHJ5XCI7XHJcbi8vIHJlZ2lzdGVyRWxlbWVudChcIkZhYlwiLCAoKSA9PiByZXF1aXJlKFwibmF0aXZlc2NyaXB0LWZsb2F0aW5nYWN0aW9uYnV0dG9uXCIpLkZhYik7XHJcbi8vaW1wb3J0IHsgcmVnaXN0ZXJFbGVtZW50IH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1hbmd1bGFyL2VsZW1lbnQtcmVnaXN0cnlcIjtcclxuLy9pbXBvcnQgeyBDYXJkVmlldyB9IGZyb20gXCJuYXRpdmVzY3JpcHQtY2FyZHZpZXdcIjtcclxuLy9yZWdpc3RlckVsZW1lbnQoXCJDYXJkVmlld1wiLCAoKSA9PiBDYXJkVmlldyk7XHJcblxyXG4vLyBpbXBvcnQgKiBhcyBlbGVtZW50UmVnaXN0cnlNb2R1bGUgZnJvbSBcIm5hdGl2ZXNjcmlwdC1hbmd1bGFyL2VsZW1lbnQtcmVnaXN0cnlcIjtcclxuLy8gaW1wb3J0ICogYXMgTGFiZWxNb2R1bGUgZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvbGFiZWxcIjtcclxuLy8gZWxlbWVudFJlZ2lzdHJ5TW9kdWxlLnJlZ2lzdGVyRWxlbWVudChcclxuLy8gICBcIkNhcmRWaWV3XCIsXHJcbi8vICAgKCkgPT4gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1jYXJkdmlld1wiKS5DYXJkVmlld1xyXG4vLyApO1xyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcclxuICAgIHNlbGVjdG9yOiBcIm5zLWNvbXBsZXRlY2hlY2tvdXRcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi4vY29tcGxldGVjaGVja291dC5jb21wb25lbnQuaHRtbFwiLFxyXG4gICAgc3R5bGVVcmxzOiBbXCIuL2NvbXBsZXRlY2hlY2tvdXQtY29tbW9uLmNzc1wiLCBcIi4vY29tcGxldGVjaGVja291dC5jb21wb25lbnQuY3NzXCJdLFxyXG59KVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBDb21wbGV0ZUNoZWNrb3V0Q29tcG9uZW50IHtcclxuXHJcbiAgICBcclxuICAgIHB1YmxpYyBzZWxlY3RlZFRhYjogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyB0YWJzOiBCb3R0b21OYXZpZ2F0aW9uVGFiW10gPSBbXHJcbiAgICAgICAgbmV3IEJvdHRvbU5hdmlnYXRpb25UYWIoJ0ZpcnN0JywgJ3Nob3AnKSxcclxuICAgICAgICBuZXcgQm90dG9tTmF2aWdhdGlvblRhYignU2Vjb25kJywgJ2JveCcsIGZhbHNlKSxcclxuICAgICAgICBuZXcgQm90dG9tTmF2aWdhdGlvblRhYignVGhpcmQnLCAnYWNjZXB0JyksXHJcbiAgICAgICAgbmV3IEJvdHRvbU5hdmlnYXRpb25UYWIoJ0ZvdXJ0aCcsICd1c2VyJylcclxuICAgIF07XHJcblxyXG4gICAgcHJpdmF0ZSBfYm90dG9tTmF2aWdhdGlvbjogQm90dG9tTmF2aWdhdGlvbjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhZ2U6IFBhZ2UpIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2JvdHRvbU5hdmlnYXRpb24gPSB0aGlzLnBhZ2UuZ2V0Vmlld0J5SWQoJ2JvdHRvbU5hdmlnYXRpb24nKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkJvdHRvbU5hdmlnYXRpb25UYWJTZWxlY3RlZChhcmdzOiBPblRhYlNlbGVjdGVkRXZlbnREYXRhKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFRhYiA9IGFyZ3MubmV3SW5kZXg7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRUYWIgPT09IDEpIHtcclxuICAgICAgICAgICAgYWxlcnQoJ1RoaXMgaXRlbSBoYXMgc2VsZWN0YWJsZTogZmFsc2UsIGFuZCBzaG91bGQgYmUgdXNlZCB0byBwZXJmb3JtIGFjdGlvbnMnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coYG9sZCB0YWIgaW5kZXg6ICAke2FyZ3Mub2xkSW5kZXh9YCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYHNlbGVjdGVkIHRhYiBpbmRleDogICR7YXJncy5uZXdJbmRleH1gKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbn0iXX0=