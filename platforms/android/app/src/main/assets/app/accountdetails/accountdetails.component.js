"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
var nativescript_bottom_navigation_1 = require("nativescript-bottom-navigation");
var AccountDetailsComponent = /** @class */ (function () {
    function AccountDetailsComponent(page) {
        this.page = page;
        this.sliderValue1 = 15;
        this.selectedTab = 0;
        this.tabs = [
            new nativescript_bottom_navigation_1.BottomNavigationTab('First', 'shop'),
            new nativescript_bottom_navigation_1.BottomNavigationTab('Second', 'box', false),
            new nativescript_bottom_navigation_1.BottomNavigationTab('Third', 'accept'),
            new nativescript_bottom_navigation_1.BottomNavigationTab('Fourth', 'user')
        ];
    }
    AccountDetailsComponent.prototype.ngOnInit = function () {
        this._bottomNavigation = this.page.getViewById('bottomNavigation');
    };
    AccountDetailsComponent.prototype.onBottomNavigationTabSelected = function (args) {
        this.selectedTab = args.newIndex;
        if (this.selectedTab === 1) {
            alert('This item has selectable: false, and should be used to perform actions');
        }
        console.log("old tab index:  " + args.oldIndex);
        console.log("selected tab index:  " + args.newIndex);
    };
    AccountDetailsComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: "ns-accountdetails",
            templateUrl: "./accountdetails.component.html",
            styleUrls: ["./accountdetails-common.css", "./accountdetails.component.css"]
        }),
        __metadata("design:paramtypes", [page_1.Page])
    ], AccountDetailsComponent);
    return AccountDetailsComponent;
}());
exports.AccountDetailsComponent = AccountDetailsComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudGRldGFpbHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWNjb3VudGRldGFpbHMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWlFO0FBU2pFLGdDQUErQjtBQWUvQixpRkFJd0M7QUFtQnhDO0lBY0ksaUNBQW9CLElBQVU7UUFBVixTQUFJLEdBQUosSUFBSSxDQUFNO1FBWHZCLGlCQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLGdCQUFXLEdBQVcsQ0FBQyxDQUFDO1FBQ3hCLFNBQUksR0FBMEI7WUFDakMsSUFBSSxvREFBbUIsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDO1lBQ3hDLElBQUksb0RBQW1CLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7WUFDL0MsSUFBSSxvREFBbUIsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDO1lBQzFDLElBQUksb0RBQW1CLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQztTQUM1QyxDQUFDO0lBSWdDLENBQUM7SUFFbkMsMENBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCwrREFBNkIsR0FBN0IsVUFBOEIsSUFBNEI7UUFDdEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ2pDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixLQUFLLENBQUMsd0VBQXdFLENBQUMsQ0FBQztRQUNwRixDQUFDO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBbUIsSUFBSSxDQUFDLFFBQVUsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQXdCLElBQUksQ0FBQyxRQUFVLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBM0JRLHVCQUF1QjtRQVZuQyxnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ25CLFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsV0FBVyxFQUFFLGlDQUFpQztZQUM5QyxTQUFTLEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxnQ0FBZ0MsQ0FBQztTQUcvRSxDQUFDO3lDQWlCNEIsV0FBSTtPQWRyQix1QkFBdUIsQ0FpQ25DO0lBQUQsOEJBQUM7Q0FBQSxBQWpDRCxJQWlDQztBQWpDWSwwREFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFJvdXRlciwgQWN0aXZhdGVkUm91dGUgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XHJcbmltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xyXG5pbXBvcnQgeyBTbmFja0JhciB9IGZyb20gXCJuYXRpdmVzY3JpcHQtc25hY2tiYXJcIjtcclxuaW1wb3J0ICogYXMgQXBwbGljYXRpb25TZXR0aW5ncyBmcm9tIFwiYXBwbGljYXRpb24tc2V0dGluZ3NcIjtcclxuaW1wb3J0IHsgY29ubmVjdGlvblR5cGUsIGdldENvbm5lY3Rpb25UeXBlIH0gZnJvbSBcImNvbm5lY3Rpdml0eVwiO1xyXG5pbXBvcnQgeyBBbmltYXRpb24gfSBmcm9tIFwidWkvYW5pbWF0aW9uXCI7XHJcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwidWkvY29yZS92aWV3XCI7XHJcbmltcG9ydCB7IHByb21wdCB9IGZyb20gXCJ1aS9kaWFsb2dzXCI7XHJcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwidWkvcGFnZVwiO1xyXG5pbXBvcnQgeyBUZXh0RmllbGQgfSBmcm9tIFwidWkvdGV4dC1maWVsZFwiO1xyXG5cclxuaW1wb3J0IHsgVmFsdWVMaXN0LCBEcm9wRG93biB9IGZyb20gXCJuYXRpdmVzY3JpcHQtZHJvcC1kb3duXCI7XHJcbmltcG9ydCB7IFNlbGVjdGVkSW5kZXhDaGFuZ2VkRXZlbnREYXRhIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1kcm9wLWRvd25cIjtcclxuaW1wb3J0IHsgQ29vcGVyYXRpdmUsIFVzZXIgfSBmcm9tIFwiLi4vLi4vbW9kZWxzL2luZGV4XCI7XHJcbmltcG9ydCB7IENvb3BlcmF0aXZlU2VydmljZSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9jb29wZXJhdGl2ZS5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IENvb3BlcmF0aXZlU3RhZmZTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2Nvb3BlcmF0aXZlU3RhZmYuc2VydmljZVwiO1xyXG5cclxuaW1wb3J0IHsgTWVtYmVyU2VydmljZSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9tZW1iZXIuc2VydmljZVwiO1xyXG5cclxuaW1wb3J0IHsgQ29vcGVyYXRpdmVTdGFmZiwgVmVyaWZ5QXV0aCB9IGZyb20gXCIuLi8uLi9tb2RlbHMvaW5kZXhcIjtcclxuXHJcbmltcG9ydCB7IFROU0ZhbmN5QWxlcnQgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWZhbmN5YWxlcnRcIjtcclxuXHJcbmltcG9ydCB7XHJcbiAgICBCb3R0b21OYXZpZ2F0aW9uLFxyXG4gICAgQm90dG9tTmF2aWdhdGlvblRhYixcclxuICAgIE9uVGFiU2VsZWN0ZWRFdmVudERhdGFcclxufSBmcm9tIFwibmF0aXZlc2NyaXB0LWJvdHRvbS1uYXZpZ2F0aW9uXCI7XHJcbmltcG9ydCB7XHJcbiAgICBBbmRyb2lkRGF0YSxcclxuICAgIEVsZXZhdGlvbixcclxuICAgIFNoYXBlLFxyXG4gICAgU2hhcGVFbnVtXHJcbn0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1uZy1zaGFkb3dcIjtcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbiAgICBzZWxlY3RvcjogXCJucy1hY2NvdW50ZGV0YWlsc1wiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiLi9hY2NvdW50ZGV0YWlscy5jb21wb25lbnQuaHRtbFwiLFxyXG4gICAgc3R5bGVVcmxzOiBbXCIuL2FjY291bnRkZXRhaWxzLWNvbW1vbi5jc3NcIiwgXCIuL2FjY291bnRkZXRhaWxzLmNvbXBvbmVudC5jc3NcIl1cclxuICBcclxuICBcclxufSlcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQWNjb3VudERldGFpbHNDb21wb25lbnQge1xyXG5cclxuICAgIFxyXG4gICAgcHVibGljIHNsaWRlclZhbHVlMSA9IDE1O1xyXG4gICAgcHVibGljIHNlbGVjdGVkVGFiOiBudW1iZXIgPSAwO1xyXG4gICAgcHVibGljIHRhYnM6IEJvdHRvbU5hdmlnYXRpb25UYWJbXSA9IFtcclxuICAgICAgICBuZXcgQm90dG9tTmF2aWdhdGlvblRhYignRmlyc3QnLCAnc2hvcCcpLFxyXG4gICAgICAgIG5ldyBCb3R0b21OYXZpZ2F0aW9uVGFiKCdTZWNvbmQnLCAnYm94JywgZmFsc2UpLFxyXG4gICAgICAgIG5ldyBCb3R0b21OYXZpZ2F0aW9uVGFiKCdUaGlyZCcsICdhY2NlcHQnKSxcclxuICAgICAgICBuZXcgQm90dG9tTmF2aWdhdGlvblRhYignRm91cnRoJywgJ3VzZXInKVxyXG4gICAgXTtcclxuXHJcbiAgICBwcml2YXRlIF9ib3R0b21OYXZpZ2F0aW9uOiBCb3R0b21OYXZpZ2F0aW9uO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGFnZTogUGFnZSkgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fYm90dG9tTmF2aWdhdGlvbiA9IHRoaXMucGFnZS5nZXRWaWV3QnlJZCgnYm90dG9tTmF2aWdhdGlvbicpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQm90dG9tTmF2aWdhdGlvblRhYlNlbGVjdGVkKGFyZ3M6IE9uVGFiU2VsZWN0ZWRFdmVudERhdGEpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkVGFiID0gYXJncy5uZXdJbmRleDtcclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFRhYiA9PT0gMSkge1xyXG4gICAgICAgICAgICBhbGVydCgnVGhpcyBpdGVtIGhhcyBzZWxlY3RhYmxlOiBmYWxzZSwgYW5kIHNob3VsZCBiZSB1c2VkIHRvIHBlcmZvcm0gYWN0aW9ucycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhgb2xkIHRhYiBpbmRleDogICR7YXJncy5vbGRJbmRleH1gKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhgc2VsZWN0ZWQgdGFiIGluZGV4OiAgJHthcmdzLm5ld0luZGV4fWApO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcbn0iXX0=